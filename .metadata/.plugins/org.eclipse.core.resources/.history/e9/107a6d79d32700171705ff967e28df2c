package com.ads.provider;

import java.sql.*;

import com.object.*;
import com.sql.ads.MakeConditions;
import com.*;
import com.ads.basic.BasicImpl;

import java.text.SimpleDateFormat;
import java.text.DateFormat;

public class ProviderImpl extends BasicImpl implements Provider {

	public ProviderImpl(ConnectionPool cp) {
		super(cp, "Provider");
		// TODO Auto-generated constructor stub
	}

	@Override
	public boolean addProvider(ProviderObject item) {
		String sql = "INSERT INTO provider(";
		sql += "provider_name,provider_address,provider_note,";
		sql += "provider_phone,provider_homephone,provider_taxcode,";
		sql += "provider_image";
		sql += ")";
		sql += "VALUES(?,?,?,?,?,?,?)";
		
		try {
			PreparedStatement preAdd = this.con.prepareStatement(sql);
			preAdd.setString(1, item.getProvider_name());
			preAdd.setString(2, item.getProvider_address());
			preAdd.setString(3, item.getProvider_note());
			preAdd.setString(4, item.getProvider_phone());
			preAdd.setString(5, item.getProvider_homephone());
			preAdd.setString(6, item.getProvider_taxcode());
			preAdd.setString(7, item.getProvider_image());
			
			return this.add(preAdd);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// TODO Auto-generated method stub
		return false;
	}
	
	private String getDateToday(){
        String datetoday = "";
        Date date = new Date(System.currentTimeMillis());
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        datetoday = df.format(date);
        return datetoday;
    }
	
	@Override
	public boolean editProvider(ProviderObject item) {
		String sql = "UPDATE provider SET ";
		sql += "provider_name = ?,provider_address = ?,";
		sql += "provider_note = ?,provider_phone = ?,";
		sql += "provider_homephone = ?,provider_taxcode = ?,";
		sql += "provider_image = ?";
		sql += " WHERE provider_id = ?";
		
		try {
			PreparedStatement preEdit = this.con.prepareStatement(sql);
			preEdit.setString(1, item.getProvider_name());
			preEdit.setString(2, item.getProvider_address());
			preEdit.setString(3, item.getProvider_note());
			preEdit.setString(4, item.getProvider_phone());
			preEdit.setString(5, item.getProvider_homephone());
			preEdit.setString(6, item.getProvider_taxcode());
			preEdit.setString(7, item.getProvider_image());
			
			return this.edit(preEdit);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean delProvider(ProviderObject item) {
		if(!isExistingImages(item)){
			return false;
		}
		
		String sql = "DELETE FROM provider WHERE provider_id = ?";
		
		try {
			PreparedStatement preDel = this.con.prepareStatement(sql);
			preDel.setInt(1, item.getProvider_id());
			
			return this.del(preDel);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		// TODO Auto-generated method stub
		return false;
	}
	
	private boolean isExistingImages(ProviderObject item){
        boolean flag = true;
        String sql = "SELECT images_id FROM tblimages WHERE images_Provider_id = "+item.getProvider_id()+"";
        ResultSet rs = this.get(sql,0);
        if(rs !=null){
            try {
                if (rs.next()) {
                    flag = false;
                }
                rs.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return flag;
    }
	
	@Override
	public ResultSet getProvider(int id) {
		String sql = "SELECT * FROM Provider WHERE Provider_id = ?";
		
		return this.get(sql, id);
	}

	@Override
	public ResultSet getProviders(ProviderObject similar, int at, byte total) {
		String sql = "SELECT * FROM Provider p LEFT JOIN category c ON p.Provider_category_id = c.category_id LEFT JOIN category_group cg ON c.category_group_id = cg.category_group_id ";
		String conds = MakeConditions.createConditionProvider(similar);

        if(!conds.equalsIgnoreCase("")){
            sql += " WHERE "+conds+" ";
        }
        
        sql +=" ORDER BY Provider_name ASC ";
        sql +=" LIMIT "+ at +","+ total;
        return this.gets(sql);
	}
	
	public static void main(String[] args){
        // Tao bo quan ly ket noi
        ConnectionPool cp = new ConnectionPoolImpl();

        //Tao doi tuong thuc thi chuc nang
        Provider a = new ProviderImpl(cp);

        // tao doi tuong moi
        ProviderObject nProvider = new ProviderObject();
        nProvider.setProvider_id(1);
        nProvider.setProvider_name("ban moi3");
        nProvider.setProvider_category_id(2);
        //Thuc hien
        boolean result = a.addProvider(nProvider);
        if(!result){
            System.out.println("\nKhong thanh cong\n");
        }
        //Lay danh sach nguoi su dung

        ResultSet rs = a.getProviders(null,0,(byte) 10);

        //Duyet va hien thi
        if(rs !=null){
            try {
                while (rs.next()) {
                    System.out.print(rs.getInt("Provider_id")+"\t");
                    System.out.print(rs.getString("Provider_name")+"\t");
                    System.out.print(rs.getString("Provider_imported_date")+"\t");
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

}
